ggplot(aes(ClaimAmount)) +
geom_histogram()
AutoClaims %>%
ggplot(aes(ClaimAmount)) +
geom_histogram(bins = 10)
AutoClaims %>%
ggplot(aes(ClaimAmount)) +
geom_histogram(bins = 100)
str(AutoClaims)
AutoClaims %>%
ggplot(aes(Age)) +
geom_histogram(bins = 100)
AutoClaims %>%
ggplot(aes(VehicleAge)) +
geom_histogram(bins = 100)
AutoClaims %>%
ggplot(aes(AnnualMileage)) +
geom_histogram(bins = 100)
str(AutoClaims)
AutoClaims %>%
ggplot(aes(ClaimAmount)) +
geom_histogram(bins = 100)
str(AutoClaims)
AutoClaims$Gender <- as.factor(AutoClaims$Gender)
AutoClaims$VehicleType <- as.factor(AutoClaims$VehicleType)
AutoClaims$Region <- as.factor(AutoClaims$Region)
AutoClaims$PolicyType <- as.factor(AutoClaims$PolicyType)
str(AutoClaims)
str(AutoClaims)
AutoClaims %>%
ggplot(aes(Gender)) +
geom_bar(aes(y = ..prop.., fill = 'steelblue'))
AutoClaims %>%
ggplot(aes(Gender)) +
geom_bar(aes(y = ..prop.., group = 1), fill = 'steelblue')
AutoClaims %>%
ggplot(aes(Gender)) +
geom_bar(aes(x = ..prop.., group = 1), fill = 'steelblue')
AutoClaims %>%
ggplot(aes(Gender)) +
geom_bar(aes(y = ..prop.., group = 1), fill = 'steelblue') +
coord_flip()
str(AutoClaims)
AutoClaims %>%
ggplot(aes(VehicleType)) +
geom_bar(aes(y = ..prop.., group = 1), fill = 'steelblue') +
coord_flip()
AutoClaims %>%
mutate(Region_f = fct_rev(fct_infreq(Region)))
head(AutoClaims)
AutoClaims %>%
mutate(Region_f = fct_rev(fct_infreq(Region)))
head(AutoClaims)
AutoClaims %>%
mutate(Region_f = fct_rev(fct_infreq(Region)))
AutoClaims <- AutoClaims %>%
mutate(Region_f = fct_rev(fct_infreq(Region)))
head(AutoClaims)
AutoClaims %>%
ggplot(aes(Region_f)) +
geom_bar(aes(y = ..prop.., group = 1), fill = 'steelblue') +
coord_flip()
str(AutoClaims)
str(AutoClaims)
head(AutoClaims[,c('Region', 'Region_f')])
AutoClaims %>%
ggplot(aes(Region_f)) +
geom_bar() +
coord_flip()
AutoClaims %>%
ggplot(aes(Region_f)) +
geom_bar(fill = 'steelblue') +
coord_flip()
str(AutoClaims)
AutoClaims %>%
ggplot(aes(Region)) +
geom_bar(fill = 'steelblue') +
coord_flip()
str(AutoClaims)
AutoClaims %>%
ggplot(aes(ClaimAmount)) +
geom_histogram(bins = 100)
AutoClaims$Region_f <- NULL
str(AutoClaims)
AutoClaims <- AutoClaims %>%
mutate(Region = fct_rev(fct_infreq(Region)))
str(AutoClaims)
summary(AutoClaims$Region)
summary(AutoClaims)
AutoClaims %>%
ggplot(aes(Region)) +
geom_bar(fill = 'steelblue') +
coord_flip()
AutoClaims %>%
ggplot(aes(PolicyType)) +
geom_bar(fill = 'steelblue') +
coord_flip()
AutoClaims %>%
ggplot(aes(Gender)) +
geom_bar(fill = 'steelblue') +
coord_flip()
AutoClaims %>%
ggplot(aes(VehicleType)) +
geom_bar(fill = 'steelblue') +
coord_flip()
summary(AutoClaims)
str(AutoClaims)
cat_vars <- c('Gender', 'VehicleType', 'Region', 'PolicyType')
for (i in cat_vars) {
table <- as.data.frame(AutoClaims[,i])
max <- which.max(table[,2])
level_name <- as.character(table[max, 1])
AutoClaims[,i] <- relevel(AutoClaims[, i], ref = level_name)
}
table <- as.data.frame(table(AutoClaims[,i]))
str(AutoClaims)
summary(AutoClaims)
cat_vars
summary(AutoClaims[,cat_vars])
AutoClaims %>%
ggplot(aes(VehicleType)) +
geom_bar(fill = 'steelblue') +
coord_flip()
AutoClaims %>%
ggplot(aes(Gender)) +
geom_bar(fill = 'steelblue') +
coord_flip()
for (i in cat_vars) {
table2 <- as.data.frame(table(AutoClaims[,i]))
max <- which.max(table2[,2])
level_name <- as.character(table2[max, 1])
AutoClaims[,i] <- relevel(AutoClaims[, i], ref = level_name)
}
summary(AutoClaims[,cat_vars])
AutoClaims %>%
ggplot(aes(PolicyType)) +
geom_bar(fill = 'steelblue') +
coord_flip()
AutoClaims %>%
ggplot(aes(Region)) +
geom_bar(fill = 'steelblue') +
coord_flip()
AutoClaims %>%
ggplot(aes(ClaimAmount)) +
geom_histogram(bins = 100)
summary(AutoClaims[,cat_vars])
str(AutoClaims)
summary(AutoClaims[,cat_vars])
library(e1071)
skewness(AutoClaims$Age)
AutoClaims %>%
ggplot(aes(Age)) +
geom_histogram()
str(AutoClaims)
AutoClaims %>%
ggplot(aes(VehicleAge)) +
geom_histogram()
skewness(AutoClaims$VehicleAge)
AutoClaims %>%
ggplot(aes(ClaimHistory)) +
geom_histogram()
skewness(AutoClaims$ClaimHistory)
skewness(AutoClaims$DrivingExperience)
AutoClaims %>%
ggplot(aes(DrivingExperience)) +
geom_histogram()
str(AutoClaims)
num_vars <- names(AutoClaims)[sapply(AutoClaims, is.numeric)]
num_vars
test <- names(AutoClaims)[sapply(AutoClaims, !is.numeric)]
test <- names(AutoClaims)[sapply(AutoClaims, is.character)]
test
test <- names(AutoClaims)[sapply(AutoClaims, function(x) is.factor(x) ||
is.character(x))]
test
rm(test)
pairs(num_vars)
install.packages("GGally")
library(GGally)
ggpairs(num_vars)
num_df <- AutoClaims[sapply(AutoClaims, is.numeric)]
pairs(num_df)
pairs(AutoClaims)
pairs(num_df)
ggpairs(num_df)
str(cat_vars)
AutoClaims %>%
group_by(Gender) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)
for (i in cat_vars) {AutoClaims %>%
group_by(i) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)}
AutoClaims %>%
group_by(i) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)
AutoClaims %>%
group_by(Gender) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)
AutoClaims %>%
group_by(VehicleType) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)
AutoClaims %>%
group_by(Region) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)
AutoClaims %>%
group_by(PolicyType) %>%
summarize(
mean = mean(ClaimAmount),
median = median(ClaimAmount),
n = n()
)
AutoClaims %>%
ggplot(aes(Gender, ClaimAmount)) +
geom_boxplot()
AutoClaims %>%
ggplot(aes(Gender, ClaimAmount)) +
geom_boxplot(fill='red')
AutoClaims %>%
ggplot(aes(Gender, ClaimAmount)) +
geom_boxplot(fill='lightblue')
AutoClaims %>%
ggplot(aes(VehicleType, ClaimAmount)) +
geom_boxplot(fill='lightblue')
AutoClaims %>%
ggplot(aes(Region, ClaimAmount)) +
geom_boxplot(fill='lightblue')
AutoClaims %>%
ggplot(aes(PolicyType, ClaimAmount)) +
geom_boxplot(fill='lightblue')
str(AutoClaims)
AutoClaims %>%
ggplot(aes(VehicleAge, ClaimAmount)) +
geom_point(alpha = 0.4) +
geom_smooth(method = 'glm', se = FALSE, method.args = list(family =
Gamma(link = 'log'))) +
facet_wrap(~VehicleType)
AutoClaims %>%
ggplot(aes(Gender, ClaimAmount)) +
geom_point(alpha = 0.4) +
geom_smooth(method = 'glm', se = FALSE, method.args = list(family =
Gamma(link = 'log'))) +
facet_wrap(~ClaimHistory)
AutoClaims %>%
ggplot(aes(VehicleAge, ClaimAmount)) +
geom_point(alpha = 0.4) +
geom_smooth(method = 'glm', se = FALSE, method.args = list(family =
Gamma(link = 'log'))) +
facet_wrap(~VehicleType)
str(AutoClaims)
glm1 <- glm(ClaimAmount ~ VehicleAge + VehicleType + VehicleType:VehicleAge,
data = AutoClaims, family = Gamma(link = 'log'))
install.packages("effects")
library(effects)
plot(allEffects(glm1))
glm1
glm0 <- glm(ClaimAmount ~ VehicleType*VehicleAge,
data = AutoClaims, family = Gamma(link = 'log'))
glm0
glm0 <- glm(ClaimAmount ~ VehicleType:VehicleAge,
data = AutoClaims, family = Gamma(link = 'log'))
glm0
glm1 <- glm(ClaimAmount ~ VehicleType*VehicleAge,data = AutoClaims,
family = Gamma(link = 'log'))
plot(allEffects(glm1))
glm0 <- glm(ClaimAmount ~ VehicleType + VehicleAge,data = AutoClaims,
family = Gamma(link = 'log'))
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
str(AutoClaims)
glm1 <- glm(ClaimAmount ~ Gender*ClaimHistory,data = AutoClaims,
family = Gamma(link = 'log'))
plot(allEffects(glm1))
glm0 <- glm(ClaimAmount ~ Gender + ClaimHistory,data = AutoClaims,
family = Gamma(link = 'log'))
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
AutoClaims %>%
ggplot(aes(Age, ClaimAmount)) +
geom_boxplot(fill='lightblue')
AutoClaims %>%
ggplot(aes(Age, ClaimAmount)) +
geom_point() +
geom_smooth(method = 'glm', method.args(list(family = Gamma(link = 'log'))),
se = FALSE)
AutoClaims %>%
ggplot(aes(Age, ClaimAmount)) +
geom_point() +
geom_smooth(method = 'glm', method.args = list(family = Gamma(link = 'log')),
se = FALSE)
str(AutoClaims)
AutoClaims %>%
ggplot(aes(Age, ClaimAmount)) +
geom_point() +
facet_wrap(~Gender)
glm1 <- glm(ClaimAmount ~ AnnualMileage*DrivingExperience,data = AutoClaims,
family = Gamma(link = 'log'))
plot(allEffects(glm1))
glm0 <- glm(ClaimAmount ~ AnnualMileage + DrivingExperience,data = AutoClaims,
family = Gamma(link = 'log'))
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
str(AutoClaims)
AutoClaims %>%
ggplot(aes(AnnualMileage, ClaimAmount)) +
geom_point() +
facet_wrap(~Gender)
install.packages("boot")
library(boot)
cv.glm(AutoClaims, glm1, k = 10)$delta
glm1
glm1 <- glm(ClaimAmount ~ AnnualMileage*DrivingExperience,data = AutoClaims,
family = Gamma(link = 'log'))
plot(allEffects(glm1))
cv.glm(AutoClaims, glm1, k = 10)$delta
glm0 <- glm(ClaimAmount ~ AnnualMileage + DrivingExperience,data = AutoClaims,
family = Gamma(link = 'log'))
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
AutoClaims %>%
ggplot(aes(VehicleAge, ClaimAmount)) +
geom_point() +
facet_wrap(~VehicleType)
str(AutoClaims)
AutoClaims %>%
ggplot(aes(Region, ClaimAmount, fill = PolicyType)) +
geom_bar()
AutoClaims %>%
ggplot(aes(Region, ClaimAmount)) +
geom_boxplot() +
facet_wrap(~PolicyType)
str(AutoClaims)
glm1 <- glm(ClaimAmount ~ Region*PolicyType,data = AutoClaims,
family = Gamma(link = 'log'))
plot(allEffects(glm1))
glm0 <- glm(ClaimAmount ~ Region + PolicyType,data = AutoClaims,
family = Gamma(link = 'log'))
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
str(AutoClaims)
glm1 <- glm(ClaimAmount ~ VehicleType*PolicyType,data = AutoClaims,
family = Gamma(link = 'log'))
plot(allEffects(glm1))
glm0 <- glm(ClaimAmount ~ VehicleType + PolicyType,data = AutoClaims,
family = Gamma(link = 'log'))
anova(glm0, glm1, test = 'Chisq')
AIC(glm0, glm1)
library(GGally)
ggpairs(num_df)
plot(allEffects(glm1)) #effects
AIC(glm0, glm1)
anova(glm0, glm1, test = 'Chisq')
library(effects)
plot(allEffects(glm1)) #effects
library(tidyverse)
library(e1071)
library(GGally)
library(effects)
library(MASS)
fit <- fitdistr(AutoClaims$ClaimAmount, densfun = 'gamma')
fit
fit$estimate
shape_hat <- fit$estimate['shape']
rate_hat <- fit$estimate['rate']
ks.test(AutoClaims$ClaimAmount, 'pgamma', shape = shape_hat,
rate = rate_hat)
fit <- fitdistr(AutoClaims$ClaimAmount, densfun = 'normal') #MASS
fit$estimate
mean_hat <- fit$estimate['mean']
sd_hat <- fit$estimate['sd']
ks.test(AutoClaims$ClaimAmount, 'pnorm', mean = mean_hat,
sd = sd_hat)
fit <- fitdistr(AutoClaims$ClaimAmount, densfun = 'poisson') #MASS
fit$estimate
l_hat <- fit$estimate['lambda']
ks.test(AutoClaims$ClaimAmount, 'ppoisson', lambda = l_hat)
ks.test(AutoClaims$ClaimAmount, 'poisson', lambda = l_hat)
fit <- fitdistr(AutoClaims$ClaimAmount, densfun = 'log_normal') #MASS
fit <- fitdistr(AutoClaims$ClaimAmount, densfun = 'log-normal') #MASS
fit$estimate
m_hat <- fit$estimate['meanlog']
s_hat <- fit$estimate['sdlog']
ks.test(AutoClaims$ClaimAmount, 'plog-normal', meanlog = m_hat,
sdlog = s_hat)
ks.test(AutoClaims$ClaimAmount, 'plognormal', meanlog = m_hat,
sdlog = s_hat)
ks.test(AutoClaims$ClaimAmount, 'plnorm', meanlog = m_hat,
sdlog = s_hat)
fit <- fitdistr(AutoClaims$ClaimAmount, densfun = 'gamma') #MASS
fit$estimate
shape_hat <- fit$estimate['shape']
rate_hat <- fit$estimate['rate']
ks.test(AutoClaims$ClaimAmount, 'pgamma', shape = shape_hat,
rate = rate_hat)
set.seed(42)
library(caret)
partition <- createDataPartition(AutoClaims$ClaimAmount, p = 0.7, list = FALSE)
AutoClaims_train <- AutoClaims[partition,]
AutoClaims_test <- AutoClaims[-partition,]
mean(AutoClaims_train$ClaimAmount)
mean(AutoClaims_test$ClaimAmount)
str(AutoClaims_train)
glm2 <- glm(ClaimAmount ~ ., data = AutoClaims_train, family = Gamma(
link = 'log'
))
summary(glm2)
glm2
glm2
summary(glm2)
summary(glm2)
for (i in cat_vars) {
table2 <- as.data.frame(table(AutoClaims[,i]))
max <- which.max(table2[,2])
level_name <- as.character(table2[max, 1])
AutoClaims[,i] <- relevel(AutoClaims[, i], ref = level_name)
}
summary(AutoClaims[,cat_vars])
fitted(glm2)
res_dev <- residuals(glm, type = 'deviance')
res_dev <- residuals(glm2, type = 'deviance')
res_pearson <- residuals(glm2, type = 'pearson')
fitted_vals <- fitted(glm2)
plot(fitted_vals, res_dev, xlab = 'Fitted Value', ylab = 'Deviance residuals')
abline(h = 0, col = 'red')
plot(fitted_vals, res_dev, xlab = 'Fitted Value', ylab = 'Deviance residuals',
main = 'Fitted vs Deviance Residual')
abline(h = 0, col = 'red')
summary(glm2)
glm3 <- glm(ClaimAmount ~ Age + ClaimHistory, family = Gamma(link = 'log'),
data = AutoClaims_train)
summary(glm3)
glm3 <- glm(ClaimAmount ~ Age, family = Gamma(link = 'log'),
data = AutoClaims_train)
summary(glm3)
glm3 <- glm(ClaimAmount ~ Age + ClaimHistory, family = Gamma(link = 'log'),
data = AutoClaims_train)
summary(glm3)
res_dev2 <- residuals(glm3, type = 'deviance')
res_pearson2 <- residuals(glm3, type = 'pearson')
fitted_vals2 <- fitted(glm3)
plot(fitted_vals2, res_dev2, xlab = 'Fitted Value', ylab = 'Deviance residuals',
main = 'Fitted vs Deviance Residual')
abline(h = 0, col = 'red')
glm3 <- glm(ClaimAmount ~ Age*ClaimHistory, family = Gamma(link = 'log'),
data = AutoClaims_train)
summary(glm3)
res_dev2 <- residuals(glm3, type = 'deviance')
res_pearson2 <- residuals(glm3, type = 'pearson')
fitted_vals2 <- fitted(glm3)
plot(fitted_vals2, res_dev2, xlab = 'Fitted Value', ylab = 'Deviance residuals',
main = 'Fitted vs Deviance Residual')
abline(h = 0, col = 'red')
summary(glm3)
glm3 <- glm(ClaimAmount ~ Age + ClaimHistory, family = Gamma(link = 'log'),
data = AutoClaims_train)
summary(glm3)
res_dev2 <- residuals(glm3, type = 'deviance')
res_pearson2 <- residuals(glm3, type = 'pearson')
fitted_vals2 <- fitted(glm3)
plot(fitted_vals2, res_dev2, xlab = 'Fitted Value', ylab = 'Deviance residuals',
main = 'Fitted vs Deviance Residual')
abline(h = 0, col = 'red')
qqnorm(res_dev)
qqline(res_dev, col='red')
library(car)
cooksD <- cooks.distance(glm2)
hatsvalues <- hatvalues(glm2)
plot(cooksD, type = 'h', main = "Cook's Distance", ylab = 'Distance')
abline(h = 4/length(cooksD), col = 'red', lty = 2)
which(cooksD > 4/length(cooksD))
sum(which(cooksD > 4/length(cooksD)))
sum(which(cooksD > 4/length(cooksD))) / nrow(AutoClaims_train)
count(which(cooksD > 4/length(cooksD))) / nrow(AutoClaims_train)
summary(glm2)
str(AutoClaims_train)
head(AutoClaims)
pred <- predict(glm2, newdata = AutoClaims_test, type = 'response')
actual <- AutoClaims_test$ClaimAmount
rmse <- sqrt(mean(pred - actual)^2)
rmse
install.packages("Metrics")
library(Metrics)
RMSE(pred, actual)
rmse(pred, actual)
rmse <- sqrt(mean((pred - actual)^2))
rmse
rmse(pred, actual)
